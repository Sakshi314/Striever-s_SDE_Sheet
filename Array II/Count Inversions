#include <bits/stdc++.h> 

long long mergeSort(long long *arr,vector<long long>temp,long long start,long long mid,long long end){
    
    long long invCount=0;
    long long i=start,j=mid,k=start;
    while(i<=mid-1 && j<=end){
        
        if(arr[i]<=arr[j]){
            temp[k++]=arr[i++];
        }
        else{
            temp[k++]=arr[j++];
            invCount+=mid-i;
        }
        
    }
    while(i<mid){
        temp[k++]=arr[i++];
    }
    while(j<=end) temp[k++]=arr[j++];
    
    for(int i=start;i<=end;i++){
        arr[i]=temp[i];
    }
    return invCount;
    
}

long long merge(long long *arr, vector<long long>temp,int start,int end){
    
    long long mid,inCount=0;
    if(start<end){
        
        mid=(start+end)/2;
        inCount+=merge(arr,temp,start,mid);
        inCount+=merge(arr,temp,mid+1,end);
        inCount+=mergeSort(arr,temp,start,mid+1,end);
        
    }
    return inCount;
    
}

long long getInversions(long long *arr, int n){
    // Write your c9node here.
    vector<long long>temp(n);
    return merge(arr,temp,0,n-1);
}
